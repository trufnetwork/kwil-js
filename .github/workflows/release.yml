name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., v0.2.1). If not provided, it will be auto-incremented."
        required: false
        default: ""
      dist_tag:
        description: "NPM distribution tag (e.g., 'latest', 'dev', 'beta'). Defaults to 'latest'."
        required: false
        default: "latest"

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create_release:
    # we assume this runs only on main, and to merge to main
    # it was already tested properly.
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    if: github.ref == 'refs/heads/main'   # Only allow releases from main branch
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # ------------------------------------------------------------------
      # 1. Work out what version we are about to release
      # ------------------------------------------------------------------
      - name: Determine Version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          CHANNEL="${{ github.event.inputs.dist_tag }}"
          SHORT_SHA=$(git rev-parse --short HEAD)

          if [ -n "$INPUT_VERSION" ]; then
            echo "version=$INPUT_VERSION"
            echo "version=$INPUT_VERSION" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$CHANNEL" != "latest" ]; then
            BASE_VERSION=$(jq -r '.version' package.json)
            NEW_VERSION="v${BASE_VERSION}-${CHANNEL}.${SHORT_SHA}"
            echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LATEST_TAG=$(gh release view --json tagName --jq .tagName 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          NEW_VERSION_NO_V=$(npx --yes semver -i patch "$LATEST_VERSION")
          NEW_VERSION="v${NEW_VERSION_NO_V}"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------------
      # 2. Install tooling
      # ------------------------------------------------------------------
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      # ------------------------------------------------------------------
      # 3. Create release branch and update package.json
      # ------------------------------------------------------------------
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        run: |
          BRANCH="release/${{ steps.version.outputs.version }}"
          git checkout -b "$BRANCH"

      - name: Bump package.json version
        run: |
          pnpm version "$(echo ${{ steps.version.outputs.version }} | sed 's/^v//')" --no-git-tag-version

      - name: Commit package.json version
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        run: |
          git add package.json pnpm-lock.yaml || true
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
          git push -u origin HEAD

      # ------------------------------------------------------------------
      # 4. Open & merge PR (only for latest channel)
      # ------------------------------------------------------------------
      - name: Create PR
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Release ${{ steps.version.outputs.version }}" \
            --body "Automated release PR for ${{ steps.version.outputs.version }}." \
            --base main \
            --head "$(git symbolic-ref --short HEAD)"

      - name: Merge PR
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "$(git symbolic-ref --short HEAD)" --json number --jq '.[0].number')
          gh pr merge "$PR_NUMBER" --merge --delete-branch

      # ------------------------------------------------------------------
      # 5. Sync with main and create git tag
      # ------------------------------------------------------------------
      - name: Fast-forward sync with main
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        run: |
          git fetch origin main
          git merge --ff-only origin/main

      - name: Create and push git tag
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      # ------------------------------------------------------------------
      # 6. Publish to NPM with rollback on failure
      # ------------------------------------------------------------------
      - name: Publish to NPM
        run: |
          pnpm publish --tag ${{ github.event.inputs.dist_tag }} --provenance --no-git-checks || {
            echo "Publish failed, deleting tag & release"
            if [ "${{ github.event.inputs.dist_tag }}" = "latest" ]; then
              gh release delete ${{ steps.version.outputs.version }} --yes 2>/dev/null || true
            fi
            git push origin ":refs/tags/${{ steps.version.outputs.version }}"
            exit 1
          }
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      # ------------------------------------------------------------------
      # 7. Create GitHub release
      # ------------------------------------------------------------------
      - name: Create GitHub Release
        if: ${{ github.event.inputs.dist_tag == 'latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --repo="$GITHUB_REPOSITORY" \
            --title="${{ steps.version.outputs.version }}" \
            --generate-notes


