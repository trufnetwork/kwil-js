name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., v0.2.1). If not provided, it will be auto-incremented."
        required: false
        default: ""
      dist_tag:
        description: "NPM distribution tag (e.g., 'latest', 'dev', 'beta'). Defaults to 'latest'."
        required: false
        default: "latest"

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create_release:
    runs-on: ubuntu-latest
    # runs ok on local tests
    if: ${{ github.ref == 'refs/heads/main' || github.actor == 'nektos/act' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          CHANNEL="${{ github.event.inputs.dist_tag }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          if [ -n "$INPUT_VERSION" ]; then
            echo "version=$INPUT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ "$CHANNEL" != "latest" ]; then
            BASE_VERSION=$(node -p "require('./package.json').version")
            NEW_VERSION="v${BASE_VERSION}-${CHANNEL}.${SHORT_SHA}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          # For stable releases (latest), auto increment patch from last tag
          LATEST_TAG=$(gh release view --json tagName --jq .tagName 2>/dev/null || echo "v0.0.0")
          # Remove 'v' prefix if present for semver processing
          LATEST_VERSION=${LATEST_TAG#v}
          NEW_VERSION_NO_V=$(npx semver -i patch "$LATEST_VERSION")
          NEW_VERSION="v${NEW_VERSION_NO_V}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dist_tag == 'latest' && !env.ACT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
              --repo="$GITHUB_REPOSITORY" \
              --title="${{ steps.version.outputs.version }}" \
              --generate-notes

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      # TODO: Too many tests are failing from a preview state already
      #       so we're skipping them for now
      # - name: Run tests
      #   run: pnpm test

      - name: Update version in package.json
        run: pnpm version $(echo ${{ steps.version.outputs.version }} | sed 's/^v//') --no-git-tag-version

      - name: Commit version bump
        if: ${{ !env.ACT }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json pnpm-lock.yaml || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
            git push origin HEAD:main
          fi

      - name: Publish to NPM
        run: ${{ env.ACT && './scripts/mock-publish.sh' || 'pnpm publish' }} --tag ${{ github.event.inputs.dist_tag }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and push git tag
        if: ${{ !env.ACT }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }} 
